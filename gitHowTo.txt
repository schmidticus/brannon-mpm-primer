How to use Git:

Introduction:

Git is similar to SVN in that it is a version control software. One major difference between Git and SVN is that when you use Git, you make a full copy of the entire repository to your local computer.  When you are done making your changes, then you "push" your changes up to the repository that is on the remote server.  This means that you can make commits without being connected to the remote server. It also means that, if you want, you can make a repository that is only on your computer (without a remote server at all).

Getting Started:

(1) First, you must "clone" the git repository from the remote server.
In the command line, go to the directory where you want to save the repository.
Then, do this command:

$ git clone https://github.com/schmidticus/brannon-mpm-primer.git

A folder called "brannon-mpm-primer" should be created in your directory.

(2) Now, we can look at the state of the repository.
Change directories into "brannon-mpm-primer".  Type:

$ git status

This is how you see which files have been modified, and which are ready to be committed, etc.
You can also type:

$ git log

if you want to see the log of changes since the repository was first created.

(3) Adding new documents to the repository.  In order to add a new document to the repository, put (or create) that file in the folder "brannon-mpm-primer".  We will use the document I am writing now as an example.  If I type,

$ git status

I see this:

$ git status
# On branch master
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#	gitHowTo.txt
nothing added to commit but untracked files present (use "git add" to track)

Let's say I'm all done with the file.  Then, I write:

$ git add gitHowTo.txt

And then, if I see the status again I see:

$ git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#	new file:   gitHowTo.txt
#

If I had more files I wanted to add, I could do that.  But that's all I want to add, so I'm ready to commit.  I can write:

$ git commit

I am then sent into a vi text-editing environment where I can write a discription of the change I just made:

First draft of the git quick-starter how-to file.
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
#
# Committer: Steven Schmidt <stevenschmidt@Inspector-Duckworth.local>
#
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#       new file:   gitHowTo.txt
#
~                                                                                                                                              
~                                                                                                                                              
~                                                                                                                                              
-- INSERT --


Of course, to finish I press "esc", and then :wq

(3) Amending a commit (instead of making a whole new separate commit).
After changing, and then adding, the files, we do this kind of commit instead:

$ git commit --amend

(remember that "commit" has two m's, but "amend" only has one.)

You'll see the same vi text-editing environment come up, but it already has your old message in there.  You can modify it or leave it there.  save and quit again, by pressing esc, then typing :wq and then it'll commit it, but if you look at the "git log" you'll see the number of commits hasn't changed.

(4) Pushing our changes up to the remote server repository:
If you have changes that you are not yet ready to commit, 
first execute `git stash`

$ git push
Username for 'https://github.com': <username>
Password for 'https://<username>@github.com': <password>
To https://github.com/schmidticus/brannon-mpm-primer.git
   3feb752..ff5a3dc  master -> master

Note:  the owner of the repository must give you permission before you will be able to push to the repository.

If you executed `git stash` previously, then now type `git pop`


(5) Pulling other people's changes down from the remote server:

$ git pull --rebase

Note that you can only do this if everything is already committed and unmodified in your repository.

***IF YOU HAVE THINGS YOU ARE WORKING ON***
1. Close all programs that have any of your documents open in them. (such as the .tex files or the pdf file)

2. Make sure everything is NOT staged for commit.  You can check by writing "git status" and seeing if it says that anything is staged for commit.  If some things are staged for commit, you can unstage them by writing:
$ git reset HEAD *

3. Now, you can stash your changes.
$ git stash

4. Check with "git status" to make sure everything is going as plan.  It should say "working directory clean".

5. Now, pull new changes from the server.
$ git pull --rebase

6. Now you can pop your old changes back off the "stash" stack.
$ git stash pop

7. There may be merge conflicts, where what you modified is slightly different than what was changed, in the same sections.  See below for an outline of how to deal with those.

***IF YOU ALREADY COMMITTED***
If you already committed some things and you want to pull changes that are on the server repository:
When you pull --rebase, you might have some conflicts. If this is the case, then REMEMBER! you are not done.  You need to resolve the conflicts first, and then add them so the changes are "staged", and then do the "git rebase --continue" command.  After you do all that, THEN you will be finished.



(6) Rectifying merge conflicts:

If the conflict is about a generated binary file (like a pdf output from LaTeX), then just delete the file and replace it with the newly generated one.

Otherwise, if the conflict is in an ASCII text file, then the conflict will look something like this:

<<<<<<< HEAD:mergetest
This is one version of the line
=======
This is another version of the line
>>>>>>> 4e2b407f501b68f8588aa645acafffa0224b9b78:mergetest

Go in and delete the "<<<<<<", "=======" and ">>>>>>>" sections, and put the two lines together in the way you like, to form the correct combination.  Then save the file.  There may be more than one section like this in one file.

NOTE: I've noticed that sometimes it doesn't put the "<<<<<<" on its own line.  Sometimes the line of stuff you want to keep is on the same line as the "<<<<<<".  So be careful about that.
